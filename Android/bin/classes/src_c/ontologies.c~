#include "agenda.h"

/*
* -------------------------------------
*  	Agenda classes and properties
* -------------------------------------
*/
#if INCLUDE_CLASS_AGENDASERVICE
class_t *CLASS_AGENDASERVICE;
#endif
#if INCLUDE_CLASS_NOTHING
class_t *CLASS_NOTHING;
#endif
#if INCLUDE_CLASS_THING
class_t *CLASS_THING;
#endif
#if INCLUDE_CLASS_PERSON
class_t *CLASS_PERSON;
#endif
#if INCLUDE_CLASS_TIMESLOT
class_t *CLASS_TIMESLOT;
#endif
#if INCLUDE_CLASS_SERVICE
class_t *CLASS_SERVICE;
#endif




#if INCLUDE_PROPERTY_CURRENTTIMESLOT
property_t *PROPERTY_CURRENTTIMESLOT;
#endif
#if INCLUDE_PROPERTY_DURATION
property_t *PROPERTY_DURATION;
#endif
#if INCLUDE_PROPERTY_PRESENTATIONTITLE
property_t *PROPERTY_PRESENTATIONTITLE;
#endif
#if INCLUDE_PROPERTY_FIRSTTIMESLOT
property_t *PROPERTY_FIRSTTIMESLOT;
#endif
#if INCLUDE_PROPERTY_SPEAKERNAME
property_t *PROPERTY_SPEAKERNAME;
#endif
#if INCLUDE_PROPERTY_NEXTTIMESLOT
property_t *PROPERTY_NEXTTIMESLOT;
#endif
#if INCLUDE_PROPERTY_PERSONLINK
property_t *PROPERTY_PERSONLINK;
#endif
/*
* -------------------------------------
*  	Agenda classes and properties
* -------------------------------------
*/



/*
* -------------------------------------
*  	Profile classes and properties
* -------------------------------------
*/
#if INCLUDE_CLASS_PROFILE
class_t *CLASS_PROFILE;
#endif
#if INCLUDE_CLASS_NOTHING
class_t *CLASS_NOTHING;
#endif
#if INCLUDE_CLASS_PRESENTATION
class_t *CLASS_PRESENTATION;
#endif
#if INCLUDE_CLASS_THING
class_t *CLASS_THING;
#endif
#if INCLUDE_CLASS_CONTEXT
class_t *CLASS_CONTEXT;
#endif
#if INCLUDE_CLASS_PERSON
class_t *CLASS_PERSON;
#endif
#if INCLUDE_CLASS_ONLINEACCOUNT
class_t *CLASS_ONLINEACCOUNT;
#endif


#if INCLUDE_PROPERTY_HASCONTEXT
property_t *PROPERTY_HASCONTEXT;
#endif
#if INCLUDE_PROPERTY_NAME
property_t *PROPERTY_NAME;
#endif
#if INCLUDE_PROPERTY_AGE
property_t *PROPERTY_AGE;
#endif
#if INCLUDE_PROPERTY_TAGS
property_t *PROPERTY_TAGS;
#endif
#if INCLUDE_PROPERTY_MBOX
property_t *PROPERTY_MBOX;
#endif
#if INCLUDE_PROPERTY_STATUS
property_t *PROPERTY_STATUS;
#endif
#if INCLUDE_PROPERTY_PHONE
property_t *PROPERTY_PHONE;
#endif
#if INCLUDE_PROPERTY_PRESENTS
property_t *PROPERTY_PRESENTS;
#endif
#if INCLUDE_PROPERTY_PERSONINFORMATION
property_t *PROPERTY_PERSONINFORMATION;
#endif
#if INCLUDE_PROPERTY_URL
property_t *PROPERTY_URL;
#endif
#if INCLUDE_PROPERTY_ACCOUNT
property_t *PROPERTY_ACCOUNT;
#endif
#if INCLUDE_PROPERTY_TOPIC_INTEREST
property_t *PROPERTY_TOPIC_INTEREST;
#endif
#if INCLUDE_PROPERTY_IMG
property_t *PROPERTY_IMG;
#endif
#if INCLUDE_PROPERTY_TITLE
property_t *PROPERTY_TITLE;
#endif
#if INCLUDE_PROPERTY_LANGUAGE
property_t *PROPERTY_LANGUAGE;
#endif
/*
* -------------------------------------
*  	Profile classes and properties
* -------------------------------------
*/





/**
 * @brief Register ontology.
 *
 * It creates all structures, such as classes and properties. Use it firs in your propgramm.
 */
void register_ontology()
{    
    list_t *tmp_node = NULL;    

/*
* ------------------------------------ 
* 	Agenda register ontology
* ------------------------------------
*/
#if INCLUDE_PROPERTY_CURRENTTIMESLOT

PROPERTY_CURRENTTIMESLOT =  (property_t *) malloc(sizeof(property_t));
PROPERTY_CURRENTTIMESLOT->name = strdup("http://www.cs.karelia.ru/smartroom#currentTimeSlot");
PROPERTY_CURRENTTIMESLOT->about = strdup("currentTimeSlot");
//PROPERTY_CURRENTTIMESLOT->range = "http://www.cs.karelia.ru/smartroom#TimeSlot"; //getRange
PROPERTY_CURRENTTIMESLOT->domain = strdup("http://www.cs.karelia.ru/smartroom#AgendaService"); 
PROPERTY_CURRENTTIMESLOT->maxcardinality = -1;
PROPERTY_CURRENTTIMESLOT->mincardinality = -1;
PROPERTY_CURRENTTIMESLOT->subpropertyof = NULL;
PROPERTY_CURRENTTIMESLOT->oneof = list_get_new_list();  
PROPERTY_CURRENTTIMESLOT->rtti = RTTI_PROPERTY;
PROPERTY_CURRENTTIMESLOT->type = OBJECTPROPERTY;



//add_entity_to_repository((void *) PROPERTY_CURRENTTIMESLOT);
sslog_repo_add_entity((void *) PROPERTY_CURRENTTIMESLOT);

#endif
#if INCLUDE_PROPERTY_DURATION

PROPERTY_DURATION =  (property_t *) malloc(sizeof(property_t));
PROPERTY_DURATION->name = strdup("http://www.cs.karelia.ru/smartroom#duration");
PROPERTY_DURATION->about = strdup("duration");
//PROPERTY_DURATION->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_DURATION->domain = strdup("http://www.cs.karelia.ru/smartroom#AgendaService"); 
PROPERTY_DURATION->maxcardinality = -1;
PROPERTY_DURATION->mincardinality = -1;
PROPERTY_DURATION->subpropertyof = NULL;
PROPERTY_DURATION->oneof = list_get_new_list();  
PROPERTY_DURATION->rtti = RTTI_PROPERTY;
PROPERTY_DURATION->type = DATATYPEPROPERTY;



//add_entity_to_repository((void *) PROPERTY_DURATION);
sslog_repo_add_entity((void *) PROPERTY_DURATION);

#endif
#if INCLUDE_PROPERTY_PRESENTATIONTITLE

PROPERTY_PRESENTATIONTITLE =  (property_t *) malloc(sizeof(property_t));
PROPERTY_PRESENTATIONTITLE->name = strdup("http://www.cs.karelia.ru/smartroom#presentationTitle");
PROPERTY_PRESENTATIONTITLE->about = strdup("presentationTitle");
//PROPERTY_PRESENTATIONTITLE->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_PRESENTATIONTITLE->domain = strdup("http://www.cs.karelia.ru/smartroom#AgendaService"); 
PROPERTY_PRESENTATIONTITLE->maxcardinality = -1;
PROPERTY_PRESENTATIONTITLE->mincardinality = -1;
PROPERTY_PRESENTATIONTITLE->subpropertyof = NULL;
PROPERTY_PRESENTATIONTITLE->oneof = list_get_new_list();  
PROPERTY_PRESENTATIONTITLE->rtti = RTTI_PROPERTY;
PROPERTY_PRESENTATIONTITLE->type = DATATYPEPROPERTY;



//add_entity_to_repository((void *) PROPERTY_PRESENTATIONTITLE);
sslog_repo_add_entity((void *) PROPERTY_PRESENTATIONTITLE);

#endif
#if INCLUDE_PROPERTY_FIRSTTIMESLOT

PROPERTY_FIRSTTIMESLOT =  (property_t *) malloc(sizeof(property_t));
PROPERTY_FIRSTTIMESLOT->name = strdup("http://www.cs.karelia.ru/smartroom#firstTimeSlot");
PROPERTY_FIRSTTIMESLOT->about = strdup("firstTimeSlot");
//PROPERTY_FIRSTTIMESLOT->range = "http://www.cs.karelia.ru/smartroom#TimeSlot"; //getRange
PROPERTY_FIRSTTIMESLOT->domain = strdup("http://www.cs.karelia.ru/smartroom#AgendaService"); 
PROPERTY_FIRSTTIMESLOT->maxcardinality = -1;
PROPERTY_FIRSTTIMESLOT->mincardinality = -1;
PROPERTY_FIRSTTIMESLOT->subpropertyof = NULL;
PROPERTY_FIRSTTIMESLOT->oneof = list_get_new_list();  
PROPERTY_FIRSTTIMESLOT->rtti = RTTI_PROPERTY;
PROPERTY_FIRSTTIMESLOT->type = OBJECTPROPERTY;



//add_entity_to_repository((void *) PROPERTY_FIRSTTIMESLOT);
sslog_repo_add_entity((void *) PROPERTY_FIRSTTIMESLOT);

#endif
#if INCLUDE_PROPERTY_SPEAKERNAME

PROPERTY_SPEAKERNAME =  (property_t *) malloc(sizeof(property_t));
PROPERTY_SPEAKERNAME->name = strdup("http://www.cs.karelia.ru/smartroom#speakerName");
PROPERTY_SPEAKERNAME->about = strdup("speakerName");
//PROPERTY_SPEAKERNAME->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_SPEAKERNAME->domain = strdup("http://www.cs.karelia.ru/smartroom#AgendaService"); 
PROPERTY_SPEAKERNAME->maxcardinality = -1;
PROPERTY_SPEAKERNAME->mincardinality = -1;
PROPERTY_SPEAKERNAME->subpropertyof = NULL;
PROPERTY_SPEAKERNAME->oneof = list_get_new_list();  
PROPERTY_SPEAKERNAME->rtti = RTTI_PROPERTY;
PROPERTY_SPEAKERNAME->type = DATATYPEPROPERTY;



//add_entity_to_repository((void *) PROPERTY_SPEAKERNAME);
sslog_repo_add_entity((void *) PROPERTY_SPEAKERNAME);

#endif
#if INCLUDE_PROPERTY_NEXTTIMESLOT

PROPERTY_NEXTTIMESLOT =  (property_t *) malloc(sizeof(property_t));
PROPERTY_NEXTTIMESLOT->name = strdup("http://www.cs.karelia.ru/smartroom#nextTimeSlot");
PROPERTY_NEXTTIMESLOT->about = strdup("nextTimeSlot");
//PROPERTY_NEXTTIMESLOT->range = "http://www.cs.karelia.ru/smartroom#TimeSlot"; //getRange
PROPERTY_NEXTTIMESLOT->domain = strdup("http://www.cs.karelia.ru/smartroom#TimeSlot"); 
PROPERTY_NEXTTIMESLOT->maxcardinality = -1;
PROPERTY_NEXTTIMESLOT->mincardinality = -1;
PROPERTY_NEXTTIMESLOT->subpropertyof = NULL;
PROPERTY_NEXTTIMESLOT->oneof = list_get_new_list();  
PROPERTY_NEXTTIMESLOT->rtti = RTTI_PROPERTY;
PROPERTY_NEXTTIMESLOT->type = OBJECTPROPERTY;



//add_entity_to_repository((void *) PROPERTY_NEXTTIMESLOT);
sslog_repo_add_entity((void *) PROPERTY_NEXTTIMESLOT);

#endif
#if INCLUDE_PROPERTY_PERSONLINK

PROPERTY_PERSONLINK =  (property_t *) malloc(sizeof(property_t));
PROPERTY_PERSONLINK->name = strdup("http://www.cs.karelia.ru/smartroom#personLink");
PROPERTY_PERSONLINK->about = strdup("personLink");
//PROPERTY_PERSONLINK->range = "http://xmlns.com/foaf/0.1/Person"; //getRange
PROPERTY_PERSONLINK->domain = strdup("http://www.cs.karelia.ru/smartroom#TimeSlot"); 
PROPERTY_PERSONLINK->maxcardinality = -1;
PROPERTY_PERSONLINK->mincardinality = -1;
PROPERTY_PERSONLINK->subpropertyof = NULL;
PROPERTY_PERSONLINK->oneof = list_get_new_list();  
PROPERTY_PERSONLINK->rtti = RTTI_PROPERTY;
PROPERTY_PERSONLINK->type = OBJECTPROPERTY;



//add_entity_to_repository((void *) PROPERTY_PERSONLINK);
sslog_repo_add_entity((void *) PROPERTY_PERSONLINK);

#endif




#if INCLUDE_CLASS_AGENDASERVICE

CLASS_AGENDASERVICE = (class_t *) malloc(sizeof(class_t));
CLASS_AGENDASERVICE->rtti = RTTI_CLASS;
CLASS_AGENDASERVICE->classtype =  strdup("http://www.cs.karelia.ru/smartroom#AgendaService");
CLASS_AGENDASERVICE->properties = list_get_new_list();  
CLASS_AGENDASERVICE->instances = NULL;
CLASS_AGENDASERVICE->superclasses = list_get_new_list();  
CLASS_AGENDASERVICE->oneof = list_get_new_list();  

//add_entity_to_repository((void *) CLASS_AGENDASERVICE);
sslog_repo_add_entity((void *) CLASS_AGENDASERVICE);

#if INCLUDE_PROPERTY_DURATION
tmp_node = list_get_new_node(PROPERTY_DURATION);
list_add_node(tmp_node, CLASS_AGENDASERVICE->properties);
#endif
#if INCLUDE_PROPERTY_PRESENTATIONTITLE
tmp_node = list_get_new_node(PROPERTY_PRESENTATIONTITLE);
list_add_node(tmp_node, CLASS_AGENDASERVICE->properties);
#endif
#if INCLUDE_PROPERTY_FIRSTTIMESLOT
tmp_node = list_get_new_node(PROPERTY_FIRSTTIMESLOT);
list_add_node(tmp_node, CLASS_AGENDASERVICE->properties);
#endif
#if INCLUDE_PROPERTY_CURRENTTIMESLOT
tmp_node = list_get_new_node(PROPERTY_CURRENTTIMESLOT);
list_add_node(tmp_node, CLASS_AGENDASERVICE->properties);
#endif
#if INCLUDE_PROPERTY_SPEAKERNAME
tmp_node = list_get_new_node(PROPERTY_SPEAKERNAME);
list_add_node(tmp_node, CLASS_AGENDASERVICE->properties);
#endif

#endif
#if INCLUDE_CLASS_NOTHING

CLASS_NOTHING = (class_t *) malloc(sizeof(class_t));
CLASS_NOTHING->rtti = RTTI_CLASS;
CLASS_NOTHING->classtype =  strdup("http://www.w3.org/2002/07/owl#Nothing");
CLASS_NOTHING->properties = list_get_new_list();  
CLASS_NOTHING->instances = NULL;
CLASS_NOTHING->superclasses = list_get_new_list();  
CLASS_NOTHING->oneof = list_get_new_list();  

//add_entity_to_repository((void *) CLASS_NOTHING);
sslog_repo_add_entity((void *) CLASS_NOTHING);

#if INCLUDE_PROPERTY_NEXTTIMESLOT
tmp_node = list_get_new_node(PROPERTY_NEXTTIMESLOT);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_DURATION
tmp_node = list_get_new_node(PROPERTY_DURATION);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_PRESENTATIONTITLE
tmp_node = list_get_new_node(PROPERTY_PRESENTATIONTITLE);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_FIRSTTIMESLOT
tmp_node = list_get_new_node(PROPERTY_FIRSTTIMESLOT);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_CURRENTTIMESLOT
tmp_node = list_get_new_node(PROPERTY_CURRENTTIMESLOT);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_SPEAKERNAME
tmp_node = list_get_new_node(PROPERTY_SPEAKERNAME);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_PERSONLINK
tmp_node = list_get_new_node(PROPERTY_PERSONLINK);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif

#endif
#if INCLUDE_CLASS_THING

CLASS_THING = (class_t *) malloc(sizeof(class_t));
CLASS_THING->rtti = RTTI_CLASS;
CLASS_THING->classtype =  strdup("http://www.w3.org/2002/07/owl#Thing");
CLASS_THING->properties = list_get_new_list();  
CLASS_THING->instances = NULL;
CLASS_THING->superclasses = list_get_new_list();  
CLASS_THING->oneof = list_get_new_list();  

//add_entity_to_repository((void *) CLASS_THING);
sslog_repo_add_entity((void *) CLASS_THING);

#endif
#if INCLUDE_CLASS_PERSON

CLASS_PERSON = (class_t *) malloc(sizeof(class_t));
CLASS_PERSON->rtti = RTTI_CLASS;
CLASS_PERSON->classtype =  strdup("http://xmlns.com/foaf/0.1/Person");
CLASS_PERSON->properties = list_get_new_list();  
CLASS_PERSON->instances = NULL;
CLASS_PERSON->superclasses = list_get_new_list();  
CLASS_PERSON->oneof = list_get_new_list();  

//add_entity_to_repository((void *) CLASS_PERSON);
sslog_repo_add_entity((void *) CLASS_PERSON);


#endif
#if INCLUDE_CLASS_TIMESLOT

CLASS_TIMESLOT = (class_t *) malloc(sizeof(class_t));
CLASS_TIMESLOT->rtti = RTTI_CLASS;
CLASS_TIMESLOT->classtype =  strdup("http://www.cs.karelia.ru/smartroom#TimeSlot");
CLASS_TIMESLOT->properties = list_get_new_list();  
CLASS_TIMESLOT->instances = NULL;
CLASS_TIMESLOT->superclasses = list_get_new_list();  
CLASS_TIMESLOT->oneof = list_get_new_list();  

//add_entity_to_repository((void *) CLASS_TIMESLOT);
sslog_repo_add_entity((void *) CLASS_TIMESLOT);

#if INCLUDE_PROPERTY_NEXTTIMESLOT
tmp_node = list_get_new_node(PROPERTY_NEXTTIMESLOT);
list_add_node(tmp_node, CLASS_TIMESLOT->properties);
#endif
#if INCLUDE_PROPERTY_PERSONLINK
tmp_node = list_get_new_node(PROPERTY_PERSONLINK);
list_add_node(tmp_node, CLASS_TIMESLOT->properties);
#endif

#endif
#if INCLUDE_CLASS_SERVICE

CLASS_SERVICE = (class_t *) malloc(sizeof(class_t));
CLASS_SERVICE->rtti = RTTI_CLASS;
CLASS_SERVICE->classtype =  strdup("http://www.cs.karelia.ru/smartroom#Service");
CLASS_SERVICE->properties = list_get_new_list();  
CLASS_SERVICE->instances = NULL;
CLASS_SERVICE->superclasses = list_get_new_list();  
CLASS_SERVICE->oneof = list_get_new_list();  

//add_entity_to_repository((void *) CLASS_SERVICE);
sslog_repo_add_entity((void *) CLASS_SERVICE);

#endif


#if INCLUDE_CLASS_AGENDASERVICE
#if INCLUDE_CLASS_SERVICE
tmp_node = list_get_new_node(CLASS_SERVICE);
list_add_node(tmp_node, CLASS_AGENDASERVICE->superclasses);
#endif
#endif
#if INCLUDE_CLASS_NOTHING
#if INCLUDE_CLASS_AGENDASERVICE
tmp_node = list_get_new_node(CLASS_AGENDASERVICE);
list_add_node(tmp_node, CLASS_NOTHING->superclasses);
#endif
#endif
#if INCLUDE_CLASS_NOTHING
#if INCLUDE_CLASS_PERSON
tmp_node = list_get_new_node(CLASS_PERSON);
list_add_node(tmp_node, CLASS_NOTHING->superclasses);
#endif
#endif
#if INCLUDE_CLASS_NOTHING
#if INCLUDE_CLASS_TIMESLOT
tmp_node = list_get_new_node(CLASS_TIMESLOT);
list_add_node(tmp_node, CLASS_NOTHING->superclasses);
#endif
#endif
#if INCLUDE_CLASS_PERSON
#if INCLUDE_CLASS_THING
tmp_node = list_get_new_node(CLASS_THING);
list_add_node(tmp_node, CLASS_PERSON->superclasses);
#endif
#endif
#if INCLUDE_CLASS_TIMESLOT
#if INCLUDE_CLASS_THING
tmp_node = list_get_new_node(CLASS_THING);
list_add_node(tmp_node, CLASS_TIMESLOT->superclasses);
#endif
#endif
#if INCLUDE_CLASS_SERVICE
#if INCLUDE_CLASS_THING
tmp_node = list_get_new_node(CLASS_THING);
list_add_node(tmp_node, CLASS_SERVICE->superclasses);
#endif
#endif
/*
* ------------------------------------ 
* 	Agenda register ontology
* ------------------------------------
*/



/*
* ------------------------------------ 
* 	Profile register ontology
* ------------------------------------
*/
#if INCLUDE_PROPERTY_HASCONTEXT

PROPERTY_HASCONTEXT =  (property_t *) malloc(sizeof(property_t));
PROPERTY_HASCONTEXT->name = strdup("http://www.cs.karelia.ru/smartroom#hasContext");
PROPERTY_HASCONTEXT->about = strdup("hasContext");
//PROPERTY_HASCONTEXT->range = "http://www.cs.karelia.ru/smartroom#Context"; //getRange
PROPERTY_HASCONTEXT->domain = strdup("http://www.cs.karelia.ru/smartroom#Profile"); 
PROPERTY_HASCONTEXT->maxcardinality = -1;
PROPERTY_HASCONTEXT->mincardinality = -1;
PROPERTY_HASCONTEXT->subpropertyof = NULL;
PROPERTY_HASCONTEXT->oneof = list_get_new_list();  
PROPERTY_HASCONTEXT->rtti = RTTI_PROPERTY;
PROPERTY_HASCONTEXT->type = OBJECTPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_HASCONTEXT);

#endif
#if INCLUDE_PROPERTY_NAME

PROPERTY_NAME =  (property_t *) malloc(sizeof(property_t));
PROPERTY_NAME->name = strdup("http://xmlns.com/foaf/0.1/name");
PROPERTY_NAME->about = strdup("name");
//PROPERTY_NAME->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_NAME->domain = strdup("http://xmlns.com/foaf/0.1/Person"); 
PROPERTY_NAME->maxcardinality = -1;
PROPERTY_NAME->mincardinality = -1;
PROPERTY_NAME->subpropertyof = NULL;
PROPERTY_NAME->oneof = list_get_new_list();  
PROPERTY_NAME->rtti = RTTI_PROPERTY;
PROPERTY_NAME->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_NAME);

#endif
#if INCLUDE_PROPERTY_AGE

PROPERTY_AGE =  (property_t *) malloc(sizeof(property_t));
PROPERTY_AGE->name = strdup("http://xmlns.com/foaf/0.1/age");
PROPERTY_AGE->about = strdup("age");
//PROPERTY_AGE->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_AGE->domain = strdup("http://xmlns.com/foaf/0.1/Person"); 
PROPERTY_AGE->maxcardinality = -1;
PROPERTY_AGE->mincardinality = -1;
PROPERTY_AGE->subpropertyof = NULL;
PROPERTY_AGE->oneof = list_get_new_list();  
PROPERTY_AGE->rtti = RTTI_PROPERTY;
PROPERTY_AGE->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_AGE);

#endif
#if INCLUDE_PROPERTY_TAGS

PROPERTY_TAGS =  (property_t *) malloc(sizeof(property_t));
PROPERTY_TAGS->name = strdup("http://www.cs.karelia.ru/smartroom#tags");
PROPERTY_TAGS->about = strdup("tags");
//PROPERTY_TAGS->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_TAGS->domain = strdup("http://www.cs.karelia.ru/smartroom#Presentation"); 
PROPERTY_TAGS->maxcardinality = -1;
PROPERTY_TAGS->mincardinality = -1;
PROPERTY_TAGS->subpropertyof = NULL;
PROPERTY_TAGS->oneof = list_get_new_list();  
PROPERTY_TAGS->rtti = RTTI_PROPERTY;
PROPERTY_TAGS->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_TAGS);

#endif
#if INCLUDE_PROPERTY_MBOX

PROPERTY_MBOX =  (property_t *) malloc(sizeof(property_t));
PROPERTY_MBOX->name = strdup("http://xmlns.com/foaf/0.1/mbox");
PROPERTY_MBOX->about = strdup("mbox");
//PROPERTY_MBOX->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_MBOX->domain = strdup("http://xmlns.com/foaf/0.1/Person"); 
PROPERTY_MBOX->maxcardinality = -1;
PROPERTY_MBOX->mincardinality = -1;
PROPERTY_MBOX->subpropertyof = NULL;
PROPERTY_MBOX->oneof = list_get_new_list();  
PROPERTY_MBOX->rtti = RTTI_PROPERTY;
PROPERTY_MBOX->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_MBOX);

#endif
#if INCLUDE_PROPERTY_STATUS

PROPERTY_STATUS =  (property_t *) malloc(sizeof(property_t));
PROPERTY_STATUS->name = strdup("http://xmlns.com/foaf/0.1/status");
PROPERTY_STATUS->about = strdup("status");
//PROPERTY_STATUS->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_STATUS->domain = strdup("http://xmlns.com/foaf/0.1/Person"); 
PROPERTY_STATUS->maxcardinality = -1;
PROPERTY_STATUS->mincardinality = -1;
PROPERTY_STATUS->subpropertyof = NULL;
PROPERTY_STATUS->oneof = list_get_new_list();  
PROPERTY_STATUS->rtti = RTTI_PROPERTY;
PROPERTY_STATUS->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_STATUS);

#endif
#if INCLUDE_PROPERTY_PHONE

PROPERTY_PHONE =  (property_t *) malloc(sizeof(property_t));
PROPERTY_PHONE->name = strdup("http://xmlns.com/foaf/0.1/phone");
PROPERTY_PHONE->about = strdup("phone");
//PROPERTY_PHONE->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_PHONE->domain = strdup("http://xmlns.com/foaf/0.1/Person"); 
PROPERTY_PHONE->maxcardinality = -1;
PROPERTY_PHONE->mincardinality = -1;
PROPERTY_PHONE->subpropertyof = NULL;
PROPERTY_PHONE->oneof = list_get_new_list();  
PROPERTY_PHONE->rtti = RTTI_PROPERTY;
PROPERTY_PHONE->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_PHONE);

#endif
#if INCLUDE_PROPERTY_PRESENTS

PROPERTY_PRESENTS =  (property_t *) malloc(sizeof(property_t));
PROPERTY_PRESENTS->name = strdup("http://www.cs.karelia.ru/smartroom#presents");
PROPERTY_PRESENTS->about = strdup("presents");
//PROPERTY_PRESENTS->range = "http://www.cs.karelia.ru/smartroom#Presentation"; //getRange
PROPERTY_PRESENTS->domain = strdup("http://xmlns.com/foaf/0.1/Person"); 
PROPERTY_PRESENTS->maxcardinality = -1;
PROPERTY_PRESENTS->mincardinality = -1;
PROPERTY_PRESENTS->subpropertyof = NULL;
PROPERTY_PRESENTS->oneof = list_get_new_list();  
PROPERTY_PRESENTS->rtti = RTTI_PROPERTY;
PROPERTY_PRESENTS->type = OBJECTPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_PRESENTS);

#endif
#if INCLUDE_PROPERTY_PERSONINFORMATION

PROPERTY_PERSONINFORMATION =  (property_t *) malloc(sizeof(property_t));
PROPERTY_PERSONINFORMATION->name = strdup("http://www.cs.karelia.ru/smartroom#personInformation");
PROPERTY_PERSONINFORMATION->about = strdup("personInformation");
//PROPERTY_PERSONINFORMATION->range = "http://xmlns.com/foaf/0.1/Person"; //getRange
PROPERTY_PERSONINFORMATION->domain = strdup("http://www.cs.karelia.ru/smartroom#Profile"); 
PROPERTY_PERSONINFORMATION->maxcardinality = -1;
PROPERTY_PERSONINFORMATION->mincardinality = -1;
PROPERTY_PERSONINFORMATION->subpropertyof = NULL;
PROPERTY_PERSONINFORMATION->oneof = list_get_new_list();  
PROPERTY_PERSONINFORMATION->rtti = RTTI_PROPERTY;
PROPERTY_PERSONINFORMATION->type = OBJECTPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_PERSONINFORMATION);

#endif
#if INCLUDE_PROPERTY_URL

PROPERTY_URL =  (property_t *) malloc(sizeof(property_t));
PROPERTY_URL->name = strdup("http://www.cs.karelia.ru/smartroom#url");
PROPERTY_URL->about = strdup("url");
//PROPERTY_URL->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_URL->domain = strdup("http://www.cs.karelia.ru/smartroom#Presentation"); 
PROPERTY_URL->maxcardinality = -1;
PROPERTY_URL->mincardinality = -1;
PROPERTY_URL->subpropertyof = NULL;
PROPERTY_URL->oneof = list_get_new_list();  
PROPERTY_URL->rtti = RTTI_PROPERTY;
PROPERTY_URL->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_URL);

#endif
#if INCLUDE_PROPERTY_ACCOUNT

PROPERTY_ACCOUNT =  (property_t *) malloc(sizeof(property_t));
PROPERTY_ACCOUNT->name = strdup("http://xmlns.com/foaf/0.1/account");
PROPERTY_ACCOUNT->about = strdup("account");
//PROPERTY_ACCOUNT->range = "http://xmlns.com/foaf/0.1/OnlineAccount"; //getRange
PROPERTY_ACCOUNT->domain = strdup("http://xmlns.com/foaf/0.1/Person"); 
PROPERTY_ACCOUNT->maxcardinality = -1;
PROPERTY_ACCOUNT->mincardinality = -1;
PROPERTY_ACCOUNT->subpropertyof = NULL;
PROPERTY_ACCOUNT->oneof = list_get_new_list();  
PROPERTY_ACCOUNT->rtti = RTTI_PROPERTY;
PROPERTY_ACCOUNT->type = OBJECTPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_ACCOUNT);

#endif
#if INCLUDE_PROPERTY_TOPIC_INTEREST

PROPERTY_TOPIC_INTEREST =  (property_t *) malloc(sizeof(property_t));
PROPERTY_TOPIC_INTEREST->name = strdup("http://xmlns.com/foaf/0.1/topic_interest");
PROPERTY_TOPIC_INTEREST->about = strdup("topic_interest");
//PROPERTY_TOPIC_INTEREST->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_TOPIC_INTEREST->domain = strdup("http://xmlns.com/foaf/0.1/Person"); 
PROPERTY_TOPIC_INTEREST->maxcardinality = -1;
PROPERTY_TOPIC_INTEREST->mincardinality = -1;
PROPERTY_TOPIC_INTEREST->subpropertyof = NULL;
PROPERTY_TOPIC_INTEREST->oneof = list_get_new_list();  
PROPERTY_TOPIC_INTEREST->rtti = RTTI_PROPERTY;
PROPERTY_TOPIC_INTEREST->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_TOPIC_INTEREST);

#endif
#if INCLUDE_PROPERTY_IMG

PROPERTY_IMG =  (property_t *) malloc(sizeof(property_t));
PROPERTY_IMG->name = strdup("http://xmlns.com/foaf/0.1/img");
PROPERTY_IMG->about = strdup("img");
//PROPERTY_IMG->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_IMG->domain = strdup("http://xmlns.com/foaf/0.1/Person"); 
PROPERTY_IMG->maxcardinality = -1;
PROPERTY_IMG->mincardinality = -1;
PROPERTY_IMG->subpropertyof = NULL;
PROPERTY_IMG->oneof = list_get_new_list();  
PROPERTY_IMG->rtti = RTTI_PROPERTY;
PROPERTY_IMG->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_IMG);

#endif
#if INCLUDE_PROPERTY_TITLE

PROPERTY_TITLE =  (property_t *) malloc(sizeof(property_t));
PROPERTY_TITLE->name = strdup("http://www.cs.karelia.ru/smartroom#title");
PROPERTY_TITLE->about = strdup("title");
//PROPERTY_TITLE->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_TITLE->domain = strdup("http://www.cs.karelia.ru/smartroom#Presentation"); 
PROPERTY_TITLE->maxcardinality = -1;
PROPERTY_TITLE->mincardinality = -1;
PROPERTY_TITLE->subpropertyof = NULL;
PROPERTY_TITLE->oneof = list_get_new_list();  
PROPERTY_TITLE->rtti = RTTI_PROPERTY;
PROPERTY_TITLE->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_TITLE);

#endif
#if INCLUDE_PROPERTY_LANGUAGE

PROPERTY_LANGUAGE =  (property_t *) malloc(sizeof(property_t));
PROPERTY_LANGUAGE->name = strdup("http://www.cs.karelia.ru/smartroom#language");
PROPERTY_LANGUAGE->about = strdup("language");
//PROPERTY_LANGUAGE->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_LANGUAGE->domain = strdup("http://xmlns.com/foaf/0.1/Person"); 
PROPERTY_LANGUAGE->maxcardinality = -1;
PROPERTY_LANGUAGE->mincardinality = -1;
PROPERTY_LANGUAGE->subpropertyof = NULL;
PROPERTY_LANGUAGE->oneof = list_get_new_list();  
PROPERTY_LANGUAGE->rtti = RTTI_PROPERTY;
PROPERTY_LANGUAGE->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_LANGUAGE);

#endif




#if INCLUDE_CLASS_PROFILE

CLASS_PROFILE = (class_t *) malloc(sizeof(class_t));
CLASS_PROFILE->rtti = RTTI_CLASS;
CLASS_PROFILE->classtype =  strdup("http://www.cs.karelia.ru/smartroom#Profile");
CLASS_PROFILE->properties = list_get_new_list();  
CLASS_PROFILE->instances = NULL;
CLASS_PROFILE->superclasses = list_get_new_list();  
CLASS_PROFILE->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_PROFILE);

#if INCLUDE_PROPERTY_PERSONINFORMATION
tmp_node = list_get_new_node(PROPERTY_PERSONINFORMATION);
list_add_node(tmp_node, CLASS_PROFILE->properties);
#endif
#if INCLUDE_PROPERTY_HASCONTEXT
tmp_node = list_get_new_node(PROPERTY_HASCONTEXT);
list_add_node(tmp_node, CLASS_PROFILE->properties);
#endif

#endif
#if INCLUDE_CLASS_NOTHING

CLASS_NOTHING = (class_t *) malloc(sizeof(class_t));
CLASS_NOTHING->rtti = RTTI_CLASS;
CLASS_NOTHING->classtype =  strdup("http://www.w3.org/2002/07/owl#Nothing");
CLASS_NOTHING->properties = list_get_new_list();  
CLASS_NOTHING->instances = NULL;
CLASS_NOTHING->superclasses = list_get_new_list();  
CLASS_NOTHING->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_NOTHING);

#if INCLUDE_PROPERTY_IMG
tmp_node = list_get_new_node(PROPERTY_IMG);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_PRESENTS
tmp_node = list_get_new_node(PROPERTY_PRESENTS);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_PERSONINFORMATION
tmp_node = list_get_new_node(PROPERTY_PERSONINFORMATION);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_AGE
tmp_node = list_get_new_node(PROPERTY_AGE);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_TAGS
tmp_node = list_get_new_node(PROPERTY_TAGS);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_STATUS
tmp_node = list_get_new_node(PROPERTY_STATUS);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_URL
tmp_node = list_get_new_node(PROPERTY_URL);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_ACCOUNT
tmp_node = list_get_new_node(PROPERTY_ACCOUNT);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_MBOX
tmp_node = list_get_new_node(PROPERTY_MBOX);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_NAME
tmp_node = list_get_new_node(PROPERTY_NAME);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_PHONE
tmp_node = list_get_new_node(PROPERTY_PHONE);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_HASCONTEXT
tmp_node = list_get_new_node(PROPERTY_HASCONTEXT);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_TOPIC_INTEREST
tmp_node = list_get_new_node(PROPERTY_TOPIC_INTEREST);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_LANGUAGE
tmp_node = list_get_new_node(PROPERTY_LANGUAGE);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_TITLE
tmp_node = list_get_new_node(PROPERTY_TITLE);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif

#endif
#if INCLUDE_CLASS_PRESENTATION

CLASS_PRESENTATION = (class_t *) malloc(sizeof(class_t));
CLASS_PRESENTATION->rtti = RTTI_CLASS;
CLASS_PRESENTATION->classtype =  strdup("http://www.cs.karelia.ru/smartroom#Presentation");
CLASS_PRESENTATION->properties = list_get_new_list();  
CLASS_PRESENTATION->instances = NULL;
CLASS_PRESENTATION->superclasses = list_get_new_list();  
CLASS_PRESENTATION->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_PRESENTATION);

#if INCLUDE_PROPERTY_TAGS
tmp_node = list_get_new_node(PROPERTY_TAGS);
list_add_node(tmp_node, CLASS_PRESENTATION->properties);
#endif
#if INCLUDE_PROPERTY_URL
tmp_node = list_get_new_node(PROPERTY_URL);
list_add_node(tmp_node, CLASS_PRESENTATION->properties);
#endif
#if INCLUDE_PROPERTY_TITLE
tmp_node = list_get_new_node(PROPERTY_TITLE);
list_add_node(tmp_node, CLASS_PRESENTATION->properties);
#endif

#endif
#if INCLUDE_CLASS_THING

CLASS_THING = (class_t *) malloc(sizeof(class_t));
CLASS_THING->rtti = RTTI_CLASS;
CLASS_THING->classtype =  strdup("http://www.w3.org/2002/07/owl#Thing");
CLASS_THING->properties = list_get_new_list();  
CLASS_THING->instances = NULL;
CLASS_THING->superclasses = list_get_new_list();  
CLASS_THING->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_THING);


#endif
#if INCLUDE_CLASS_CONTEXT

CLASS_CONTEXT = (class_t *) malloc(sizeof(class_t));
CLASS_CONTEXT->rtti = RTTI_CLASS;
CLASS_CONTEXT->classtype =  strdup("http://www.cs.karelia.ru/smartroom#Context");
CLASS_CONTEXT->properties = list_get_new_list();  
CLASS_CONTEXT->instances = NULL;
CLASS_CONTEXT->superclasses = list_get_new_list();  
CLASS_CONTEXT->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_CONTEXT);


#endif
#if INCLUDE_CLASS_PERSON

CLASS_PERSON = (class_t *) malloc(sizeof(class_t));
CLASS_PERSON->rtti = RTTI_CLASS;
CLASS_PERSON->classtype =  strdup("http://xmlns.com/foaf/0.1/Person");
CLASS_PERSON->properties = list_get_new_list();  
CLASS_PERSON->instances = NULL;
CLASS_PERSON->superclasses = list_get_new_list();  
CLASS_PERSON->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_PERSON);

#if INCLUDE_PROPERTY_IMG
tmp_node = list_get_new_node(PROPERTY_IMG);
list_add_node(tmp_node, CLASS_PERSON->properties);
#endif
#if INCLUDE_PROPERTY_PRESENTS
tmp_node = list_get_new_node(PROPERTY_PRESENTS);
list_add_node(tmp_node, CLASS_PERSON->properties);
#endif
#if INCLUDE_PROPERTY_AGE
tmp_node = list_get_new_node(PROPERTY_AGE);
list_add_node(tmp_node, CLASS_PERSON->properties);
#endif
#if INCLUDE_PROPERTY_STATUS
tmp_node = list_get_new_node(PROPERTY_STATUS);
list_add_node(tmp_node, CLASS_PERSON->properties);
#endif
#if INCLUDE_PROPERTY_ACCOUNT
tmp_node = list_get_new_node(PROPERTY_ACCOUNT);
list_add_node(tmp_node, CLASS_PERSON->properties);
#endif
#if INCLUDE_PROPERTY_MBOX
tmp_node = list_get_new_node(PROPERTY_MBOX);
list_add_node(tmp_node, CLASS_PERSON->properties);
#endif
#if INCLUDE_PROPERTY_NAME
tmp_node = list_get_new_node(PROPERTY_NAME);
list_add_node(tmp_node, CLASS_PERSON->properties);
#endif
#if INCLUDE_PROPERTY_PHONE
tmp_node = list_get_new_node(PROPERTY_PHONE);
list_add_node(tmp_node, CLASS_PERSON->properties);
#endif
#if INCLUDE_PROPERTY_TOPIC_INTEREST
tmp_node = list_get_new_node(PROPERTY_TOPIC_INTEREST);
list_add_node(tmp_node, CLASS_PERSON->properties);
#endif
#if INCLUDE_PROPERTY_LANGUAGE
tmp_node = list_get_new_node(PROPERTY_LANGUAGE);
list_add_node(tmp_node, CLASS_PERSON->properties);
#endif

#endif
#if INCLUDE_CLASS_ONLINEACCOUNT

CLASS_ONLINEACCOUNT = (class_t *) malloc(sizeof(class_t));
CLASS_ONLINEACCOUNT->rtti = RTTI_CLASS;
CLASS_ONLINEACCOUNT->classtype =  strdup("http://xmlns.com/foaf/0.1/OnlineAccount");
CLASS_ONLINEACCOUNT->properties = list_get_new_list();  
CLASS_ONLINEACCOUNT->instances = NULL;
CLASS_ONLINEACCOUNT->superclasses = list_get_new_list();  
CLASS_ONLINEACCOUNT->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_ONLINEACCOUNT);


#endif


#if INCLUDE_CLASS_PROFILE
#if INCLUDE_CLASS_THING
tmp_node = list_get_new_node(CLASS_THING);
list_add_node(tmp_node, CLASS_PROFILE->superclasses);
#endif
#endif
#if INCLUDE_CLASS_NOTHING
#if INCLUDE_CLASS_PROFILE
tmp_node = list_get_new_node(CLASS_PROFILE);
list_add_node(tmp_node, CLASS_NOTHING->superclasses);
#endif
#endif
#if INCLUDE_CLASS_NOTHING
#if INCLUDE_CLASS_PRESENTATION
tmp_node = list_get_new_node(CLASS_PRESENTATION);
list_add_node(tmp_node, CLASS_NOTHING->superclasses);
#endif
#endif
#if INCLUDE_CLASS_NOTHING
#if INCLUDE_CLASS_CONTEXT
tmp_node = list_get_new_node(CLASS_CONTEXT);
list_add_node(tmp_node, CLASS_NOTHING->superclasses);
#endif
#endif
#if INCLUDE_CLASS_NOTHING
#if INCLUDE_CLASS_PERSON
tmp_node = list_get_new_node(CLASS_PERSON);
list_add_node(tmp_node, CLASS_NOTHING->superclasses);
#endif
#endif
#if INCLUDE_CLASS_NOTHING
#if INCLUDE_CLASS_ONLINEACCOUNT
tmp_node = list_get_new_node(CLASS_ONLINEACCOUNT);
list_add_node(tmp_node, CLASS_NOTHING->superclasses);
#endif
#endif
#if INCLUDE_CLASS_PRESENTATION
#if INCLUDE_CLASS_THING
tmp_node = list_get_new_node(CLASS_THING);
list_add_node(tmp_node, CLASS_PRESENTATION->superclasses);
#endif
#endif
#if INCLUDE_CLASS_CONTEXT
#if INCLUDE_CLASS_THING
tmp_node = list_get_new_node(CLASS_THING);
list_add_node(tmp_node, CLASS_CONTEXT->superclasses);
#endif
#endif
#if INCLUDE_CLASS_PERSON
#if INCLUDE_CLASS_THING
tmp_node = list_get_new_node(CLASS_THING);
list_add_node(tmp_node, CLASS_PERSON->superclasses);
#endif
#endif
#if INCLUDE_CLASS_ONLINEACCOUNT
#if INCLUDE_CLASS_THING
tmp_node = list_get_new_node(CLASS_THING);
list_add_node(tmp_node, CLASS_ONLINEACCOUNT->superclasses);
#endif
#endif
/*
* ------------------------------------ 
* 	Profile register ontology
* ------------------------------------
*/
}


