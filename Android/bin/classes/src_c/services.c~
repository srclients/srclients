#include "services.h"



#if INCLUDE_CLASS_NOTHING
class_t *CLASS_NOTHING;
#endif
#if INCLUDE_CLASS_SMARTROOM
class_t *CLASS_SMARTROOM;
#endif
#if INCLUDE_CLASS_THING
class_t *CLASS_THING;
#endif
#if INCLUDE_CLASS_SERVICE
class_t *CLASS_SERVICE;
#endif


#if INCLUDE_PROPERTY_HASSERVICE
property_t *PROPERTY_HASSERVICE;
#endif
#if INCLUDE_PROPERTY_DESCRIPTION
property_t *PROPERTY_DESCRIPTION;
#endif
#if INCLUDE_PROPERTY_STATUS
property_t *PROPERTY_STATUS;
#endif
#if INCLUDE_PROPERTY_SERVICENAME
property_t *PROPERTY_SERVICENAME;
#endif



/**
 * @brief Register ontology.
 *
 * It creates all structures, such as classes and properties. Use it firs in your propgramm.
 */
void register_ontology()
{    
    list_t *tmp_node = NULL;    

#if INCLUDE_PROPERTY_HASSERVICE

PROPERTY_HASSERVICE =  (property_t *) malloc(sizeof(property_t));
PROPERTY_HASSERVICE->name = strdup("http://www.cs.karelia.ru/smartroom#hasService");
PROPERTY_HASSERVICE->about = strdup("hasService");
//PROPERTY_HASSERVICE->range = "http://www.cs.karelia.ru/smartroom#Service"; //getRange
PROPERTY_HASSERVICE->domain = strdup("http://www.cs.karelia.ru/smartroom#SmartRoom"); 
PROPERTY_HASSERVICE->maxcardinality = -1;
PROPERTY_HASSERVICE->mincardinality = -1;
PROPERTY_HASSERVICE->subpropertyof = NULL;
PROPERTY_HASSERVICE->oneof = list_get_new_list();  
PROPERTY_HASSERVICE->rtti = RTTI_PROPERTY;
PROPERTY_HASSERVICE->type = OBJECTPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_HASSERVICE);

#endif
#if INCLUDE_PROPERTY_DESCRIPTION

PROPERTY_DESCRIPTION =  (property_t *) malloc(sizeof(property_t));
PROPERTY_DESCRIPTION->name = strdup("http://www.cs.karelia.ru/smartroom#description");
PROPERTY_DESCRIPTION->about = strdup("description");
//PROPERTY_DESCRIPTION->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_DESCRIPTION->domain = strdup("http://www.cs.karelia.ru/smartroom#Service"); 
PROPERTY_DESCRIPTION->maxcardinality = -1;
PROPERTY_DESCRIPTION->mincardinality = -1;
PROPERTY_DESCRIPTION->subpropertyof = NULL;
PROPERTY_DESCRIPTION->oneof = list_get_new_list();  
PROPERTY_DESCRIPTION->rtti = RTTI_PROPERTY;
PROPERTY_DESCRIPTION->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_DESCRIPTION);

#endif
#if INCLUDE_PROPERTY_STATUS

PROPERTY_STATUS =  (property_t *) malloc(sizeof(property_t));
PROPERTY_STATUS->name = strdup("http://www.cs.karelia.ru/smartroom#status");
PROPERTY_STATUS->about = strdup("status");
//PROPERTY_STATUS->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_STATUS->domain = strdup("http://www.cs.karelia.ru/smartroom#Service"); 
PROPERTY_STATUS->maxcardinality = -1;
PROPERTY_STATUS->mincardinality = -1;
PROPERTY_STATUS->subpropertyof = NULL;
PROPERTY_STATUS->oneof = list_get_new_list();  
PROPERTY_STATUS->rtti = RTTI_PROPERTY;
PROPERTY_STATUS->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_STATUS);

#endif
#if INCLUDE_PROPERTY_SERVICENAME

PROPERTY_SERVICENAME =  (property_t *) malloc(sizeof(property_t));
PROPERTY_SERVICENAME->name = strdup("http://www.cs.karelia.ru/smartroom#serviceName");
PROPERTY_SERVICENAME->about = strdup("serviceName");
//PROPERTY_SERVICENAME->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_SERVICENAME->domain = strdup("http://www.cs.karelia.ru/smartroom#Service"); 
PROPERTY_SERVICENAME->maxcardinality = -1;
PROPERTY_SERVICENAME->mincardinality = -1;
PROPERTY_SERVICENAME->subpropertyof = NULL;
PROPERTY_SERVICENAME->oneof = list_get_new_list();  
PROPERTY_SERVICENAME->rtti = RTTI_PROPERTY;
PROPERTY_SERVICENAME->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_SERVICENAME);

#endif




#if INCLUDE_CLASS_NOTHING

CLASS_NOTHING = (class_t *) malloc(sizeof(class_t));
CLASS_NOTHING->rtti = RTTI_CLASS;
CLASS_NOTHING->classtype =  strdup("http://www.w3.org/2002/07/owl#Nothing");
CLASS_NOTHING->properties = list_get_new_list();  
CLASS_NOTHING->instances = NULL;
CLASS_NOTHING->superclasses = list_get_new_list();  
CLASS_NOTHING->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_NOTHING);

#if INCLUDE_PROPERTY_HASSERVICE
tmp_node = list_get_new_node(PROPERTY_HASSERVICE);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_STATUS
tmp_node = list_get_new_node(PROPERTY_STATUS);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_DESCRIPTION
tmp_node = list_get_new_node(PROPERTY_DESCRIPTION);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_SERVICENAME
tmp_node = list_get_new_node(PROPERTY_SERVICENAME);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif

#endif
#if INCLUDE_CLASS_SMARTROOM

CLASS_SMARTROOM = (class_t *) malloc(sizeof(class_t));
CLASS_SMARTROOM->rtti = RTTI_CLASS;
CLASS_SMARTROOM->classtype =  strdup("http://www.cs.karelia.ru/smartroom#SmartRoom");
CLASS_SMARTROOM->properties = list_get_new_list();  
CLASS_SMARTROOM->instances = NULL;
CLASS_SMARTROOM->superclasses = list_get_new_list();  
CLASS_SMARTROOM->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_SMARTROOM);

#if INCLUDE_PROPERTY_HASSERVICE
tmp_node = list_get_new_node(PROPERTY_HASSERVICE);
list_add_node(tmp_node, CLASS_SMARTROOM->properties);
#endif

#endif
#if INCLUDE_CLASS_THING

CLASS_THING = (class_t *) malloc(sizeof(class_t));
CLASS_THING->rtti = RTTI_CLASS;
CLASS_THING->classtype =  strdup("http://www.w3.org/2002/07/owl#Thing");
CLASS_THING->properties = list_get_new_list();  
CLASS_THING->instances = NULL;
CLASS_THING->superclasses = list_get_new_list();  
CLASS_THING->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_THING);


#endif
#if INCLUDE_CLASS_SERVICE

CLASS_SERVICE = (class_t *) malloc(sizeof(class_t));
CLASS_SERVICE->rtti = RTTI_CLASS;
CLASS_SERVICE->classtype =  strdup("http://www.cs.karelia.ru/smartroom#Service");
CLASS_SERVICE->properties = list_get_new_list();  
CLASS_SERVICE->instances = NULL;
CLASS_SERVICE->superclasses = list_get_new_list();  
CLASS_SERVICE->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_SERVICE);

#if INCLUDE_PROPERTY_STATUS
tmp_node = list_get_new_node(PROPERTY_STATUS);
list_add_node(tmp_node, CLASS_SERVICE->properties);
#endif
#if INCLUDE_PROPERTY_DESCRIPTION
tmp_node = list_get_new_node(PROPERTY_DESCRIPTION);
list_add_node(tmp_node, CLASS_SERVICE->properties);
#endif
#if INCLUDE_PROPERTY_SERVICENAME
tmp_node = list_get_new_node(PROPERTY_SERVICENAME);
list_add_node(tmp_node, CLASS_SERVICE->properties);
#endif

#endif


#if INCLUDE_CLASS_NOTHING
#if INCLUDE_CLASS_SMARTROOM
tmp_node = list_get_new_node(CLASS_SMARTROOM);
list_add_node(tmp_node, CLASS_NOTHING->superclasses);
#endif
#endif
#if INCLUDE_CLASS_NOTHING
#if INCLUDE_CLASS_SERVICE
tmp_node = list_get_new_node(CLASS_SERVICE);
list_add_node(tmp_node, CLASS_NOTHING->superclasses);
#endif
#endif
#if INCLUDE_CLASS_SMARTROOM
#if INCLUDE_CLASS_THING
tmp_node = list_get_new_node(CLASS_THING);
list_add_node(tmp_node, CLASS_SMARTROOM->superclasses);
#endif
#endif
#if INCLUDE_CLASS_SERVICE
#if INCLUDE_CLASS_THING
tmp_node = list_get_new_node(CLASS_THING);
list_add_node(tmp_node, CLASS_SERVICE->superclasses);
#endif
#endif



}


