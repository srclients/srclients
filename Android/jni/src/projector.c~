#include "projector.h"



#if INCLUDE_CLASS_NOTHING
class_t *CLASS_NOTHING;
#endif
#if INCLUDE_CLASS_PRESENTATION
class_t *CLASS_PRESENTATION;
#endif
#if INCLUDE_CLASS_THING
class_t *CLASS_THING;
#endif
#if INCLUDE_CLASS_PROJECTORSERVICE
class_t *CLASS_PROJECTORSERVICE;
#endif
#if INCLUDE_CLASS_SERVICE
class_t *CLASS_SERVICE;
#endif


#if INCLUDE_PROPERTY_CURRENTSLIDEIMG
property_t *PROPERTY_CURRENTSLIDEIMG;
#endif
#if INCLUDE_PROPERTY_CURRENTPRESENTATION
property_t *PROPERTY_CURRENTPRESENTATION;
#endif
#if INCLUDE_PROPERTY_CURRENTSLIDENUM
property_t *PROPERTY_CURRENTSLIDENUM;
#endif
#if INCLUDE_PROPERTY_CURRENTSLIDECOUNT
property_t *PROPERTY_CURRENTSLIDECOUNT;
#endif



/**
 * @brief Register ontology.
 *
 * It creates all structures, such as classes and properties. Use it firs in your propgramm.
 */
void register_ontology()
{    
    list_t *tmp_node = NULL;    

#if INCLUDE_PROPERTY_CURRENTSLIDEIMG

PROPERTY_CURRENTSLIDEIMG =  (property_t *) malloc(sizeof(property_t));
PROPERTY_CURRENTSLIDEIMG->name = strdup("http://www.cs.karelia.ru/smartroom#currentSlideImg");
PROPERTY_CURRENTSLIDEIMG->about = strdup("currentSlideImg");
//PROPERTY_CURRENTSLIDEIMG->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_CURRENTSLIDEIMG->domain = strdup("http://www.cs.karelia.ru/smartroom#ProjectorService"); 
PROPERTY_CURRENTSLIDEIMG->maxcardinality = -1;
PROPERTY_CURRENTSLIDEIMG->mincardinality = -1;
PROPERTY_CURRENTSLIDEIMG->subpropertyof = NULL;
PROPERTY_CURRENTSLIDEIMG->oneof = list_get_new_list();  
PROPERTY_CURRENTSLIDEIMG->rtti = RTTI_PROPERTY;
PROPERTY_CURRENTSLIDEIMG->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_CURRENTSLIDEIMG);

#endif
#if INCLUDE_PROPERTY_CURRENTPRESENTATION

PROPERTY_CURRENTPRESENTATION =  (property_t *) malloc(sizeof(property_t));
PROPERTY_CURRENTPRESENTATION->name = strdup("http://www.cs.karelia.ru/smartroom#currentPresentation");
PROPERTY_CURRENTPRESENTATION->about = strdup("currentPresentation");
//PROPERTY_CURRENTPRESENTATION->range = "http://www.cs.karelia.ru/smartroom#Presentation"; //getRange
PROPERTY_CURRENTPRESENTATION->domain = strdup("http://www.cs.karelia.ru/smartroom#ProjectorService"); 
PROPERTY_CURRENTPRESENTATION->maxcardinality = -1;
PROPERTY_CURRENTPRESENTATION->mincardinality = -1;
PROPERTY_CURRENTPRESENTATION->subpropertyof = NULL;
PROPERTY_CURRENTPRESENTATION->oneof = list_get_new_list();  
PROPERTY_CURRENTPRESENTATION->rtti = RTTI_PROPERTY;
PROPERTY_CURRENTPRESENTATION->type = OBJECTPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_CURRENTPRESENTATION);

#endif
#if INCLUDE_PROPERTY_CURRENTSLIDENUM

PROPERTY_CURRENTSLIDENUM =  (property_t *) malloc(sizeof(property_t));
PROPERTY_CURRENTSLIDENUM->name = strdup("http://www.cs.karelia.ru/smartroom#currentSlideNum");
PROPERTY_CURRENTSLIDENUM->about = strdup("currentSlideNum");
//PROPERTY_CURRENTSLIDENUM->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_CURRENTSLIDENUM->domain = strdup("http://www.cs.karelia.ru/smartroom#ProjectorService"); 
PROPERTY_CURRENTSLIDENUM->maxcardinality = -1;
PROPERTY_CURRENTSLIDENUM->mincardinality = -1;
PROPERTY_CURRENTSLIDENUM->subpropertyof = NULL;
PROPERTY_CURRENTSLIDENUM->oneof = list_get_new_list();  
PROPERTY_CURRENTSLIDENUM->rtti = RTTI_PROPERTY;
PROPERTY_CURRENTSLIDENUM->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_CURRENTSLIDENUM);

#endif
#if INCLUDE_PROPERTY_CURRENTSLIDECOUNT

PROPERTY_CURRENTSLIDECOUNT =  (property_t *) malloc(sizeof(property_t));
PROPERTY_CURRENTSLIDECOUNT->name = strdup("http://www.cs.karelia.ru/smartroom#currentSlideCount");
PROPERTY_CURRENTSLIDECOUNT->about = strdup("currentSlideCount");
//PROPERTY_CURRENTSLIDECOUNT->range = "http://www.w3.org/2001/XMLSchema#string"; //getRange
PROPERTY_CURRENTSLIDECOUNT->domain = strdup("http://www.cs.karelia.ru/smartroom#ProjectorService"); 
PROPERTY_CURRENTSLIDECOUNT->maxcardinality = -1;
PROPERTY_CURRENTSLIDECOUNT->mincardinality = -1;
PROPERTY_CURRENTSLIDECOUNT->subpropertyof = NULL;
PROPERTY_CURRENTSLIDECOUNT->oneof = list_get_new_list();  
PROPERTY_CURRENTSLIDECOUNT->rtti = RTTI_PROPERTY;
PROPERTY_CURRENTSLIDECOUNT->type = DATATYPEPROPERTY;



sslog_repo_add_entity((void *) PROPERTY_CURRENTSLIDECOUNT);

#endif




#if INCLUDE_CLASS_NOTHING

CLASS_NOTHING = (class_t *) malloc(sizeof(class_t));
CLASS_NOTHING->rtti = RTTI_CLASS;
CLASS_NOTHING->classtype =  strdup("http://www.w3.org/2002/07/owl#Nothing");
CLASS_NOTHING->properties = list_get_new_list();  
CLASS_NOTHING->instances = NULL;
CLASS_NOTHING->superclasses = list_get_new_list();  
CLASS_NOTHING->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_NOTHING);

#if INCLUDE_PROPERTY_CURRENTSLIDECOUNT
tmp_node = list_get_new_node(PROPERTY_CURRENTSLIDECOUNT);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_CURRENTPRESENTATION
tmp_node = list_get_new_node(PROPERTY_CURRENTPRESENTATION);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_CURRENTSLIDENUM
tmp_node = list_get_new_node(PROPERTY_CURRENTSLIDENUM);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif
#if INCLUDE_PROPERTY_CURRENTSLIDEIMG
tmp_node = list_get_new_node(PROPERTY_CURRENTSLIDEIMG);
list_add_node(tmp_node, CLASS_NOTHING->properties);
#endif

#endif
#if INCLUDE_CLASS_PRESENTATION

CLASS_PRESENTATION = (class_t *) malloc(sizeof(class_t));
CLASS_PRESENTATION->rtti = RTTI_CLASS;
CLASS_PRESENTATION->classtype =  strdup("http://www.cs.karelia.ru/smartroom#Presentation");
CLASS_PRESENTATION->properties = list_get_new_list();  
CLASS_PRESENTATION->instances = NULL;
CLASS_PRESENTATION->superclasses = list_get_new_list();  
CLASS_PRESENTATION->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_PRESENTATION);


#endif
#if INCLUDE_CLASS_THING

CLASS_THING = (class_t *) malloc(sizeof(class_t));
CLASS_THING->rtti = RTTI_CLASS;
CLASS_THING->classtype =  strdup("http://www.w3.org/2002/07/owl#Thing");
CLASS_THING->properties = list_get_new_list();  
CLASS_THING->instances = NULL;
CLASS_THING->superclasses = list_get_new_list();  
CLASS_THING->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_THING);


#endif
#if INCLUDE_CLASS_PROJECTORSERVICE

CLASS_PROJECTORSERVICE = (class_t *) malloc(sizeof(class_t));
CLASS_PROJECTORSERVICE->rtti = RTTI_CLASS;
CLASS_PROJECTORSERVICE->classtype =  strdup("http://www.cs.karelia.ru/smartroom#ProjectorService");
CLASS_PROJECTORSERVICE->properties = list_get_new_list();  
CLASS_PROJECTORSERVICE->instances = NULL;
CLASS_PROJECTORSERVICE->superclasses = list_get_new_list();  
CLASS_PROJECTORSERVICE->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_PROJECTORSERVICE);

#if INCLUDE_PROPERTY_CURRENTSLIDECOUNT
tmp_node = list_get_new_node(PROPERTY_CURRENTSLIDECOUNT);
list_add_node(tmp_node, CLASS_PROJECTORSERVICE->properties);
#endif
#if INCLUDE_PROPERTY_CURRENTPRESENTATION
tmp_node = list_get_new_node(PROPERTY_CURRENTPRESENTATION);
list_add_node(tmp_node, CLASS_PROJECTORSERVICE->properties);
#endif
#if INCLUDE_PROPERTY_CURRENTSLIDENUM
tmp_node = list_get_new_node(PROPERTY_CURRENTSLIDENUM);
list_add_node(tmp_node, CLASS_PROJECTORSERVICE->properties);
#endif
#if INCLUDE_PROPERTY_CURRENTSLIDEIMG
tmp_node = list_get_new_node(PROPERTY_CURRENTSLIDEIMG);
list_add_node(tmp_node, CLASS_PROJECTORSERVICE->properties);
#endif

#endif
#if INCLUDE_CLASS_SERVICE

CLASS_SERVICE = (class_t *) malloc(sizeof(class_t));
CLASS_SERVICE->rtti = RTTI_CLASS;
CLASS_SERVICE->classtype =  strdup("http://www.cs.karelia.ru/smartroom#Service");
CLASS_SERVICE->properties = list_get_new_list();  
CLASS_SERVICE->instances = NULL;
CLASS_SERVICE->superclasses = list_get_new_list();  
CLASS_SERVICE->oneof = list_get_new_list();  

sslog_repo_add_entity((void *) CLASS_SERVICE);


#endif


#if INCLUDE_CLASS_NOTHING
#if INCLUDE_CLASS_PRESENTATION
tmp_node = list_get_new_node(CLASS_PRESENTATION);
list_add_node(tmp_node, CLASS_NOTHING->superclasses);
#endif
#endif
#if INCLUDE_CLASS_NOTHING
#if INCLUDE_CLASS_PROJECTORSERVICE
tmp_node = list_get_new_node(CLASS_PROJECTORSERVICE);
list_add_node(tmp_node, CLASS_NOTHING->superclasses);
#endif
#endif
#if INCLUDE_CLASS_PRESENTATION
#if INCLUDE_CLASS_THING
tmp_node = list_get_new_node(CLASS_THING);
list_add_node(tmp_node, CLASS_PRESENTATION->superclasses);
#endif
#endif
#if INCLUDE_CLASS_PROJECTORSERVICE
#if INCLUDE_CLASS_SERVICE
tmp_node = list_get_new_node(CLASS_SERVICE);
list_add_node(tmp_node, CLASS_PROJECTORSERVICE->superclasses);
#endif
#endif
#if INCLUDE_CLASS_SERVICE
#if INCLUDE_CLASS_THING
tmp_node = list_get_new_node(CLASS_THING);
list_add_node(tmp_node, CLASS_SERVICE->superclasses);
#endif
#endif



}


